//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `EternalLogo-51X9B.ttf`.
    static let eternalLogo51X9BTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EternalLogo-51X9B", pathExtension: "ttf")
    /// Resource file `EternalUiBold-jErYR.ttf`.
    static let eternalUiBoldJErYRTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "EternalUiBold-jErYR", pathExtension: "ttf")
    /// Resource file `EternalUiRegular-1Gap2.ttf`.
    static let eternalUiRegular1Gap2Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "EternalUiRegular-1Gap2", pathExtension: "ttf")

    /// `bundle.url(forResource: "EternalLogo-51X9B", withExtension: "ttf")`
    static func eternalLogo51X9BTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.eternalLogo51X9BTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "EternalUiBold-jErYR", withExtension: "ttf")`
    static func eternalUiBoldJErYRTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.eternalUiBoldJErYRTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "EternalUiRegular-1Gap2", withExtension: "ttf")`
    static func eternalUiRegular1Gap2Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.eternalUiRegular1Gap2Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `EternalLogo-Regular`.
    static let eternalLogoRegular = Rswift.FontResource(fontName: "EternalLogo-Regular")
    /// Font `EternalUI-Bold`.
    static let eternalUIBold = Rswift.FontResource(fontName: "EternalUI-Bold")
    /// Font `EternalUI-Regular`.
    static let eternalUIRegular = Rswift.FontResource(fontName: "EternalUI-Regular")

    /// `UIFont(name: "EternalLogo-Regular", size: ...)`
    static func eternalLogoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: eternalLogoRegular, size: size)
    }

    /// `UIFont(name: "EternalUI-Bold", size: ...)`
    static func eternalUIBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: eternalUIBold, size: size)
    }

    /// `UIFont(name: "EternalUI-Regular", size: ...)`
    static func eternalUIRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: eternalUIRegular, size: size)
    }

    static func validate() throws {
      if R.font.eternalLogoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EternalLogo-Regular' could not be loaded, is 'EternalLogo-51X9B.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.eternalUIBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EternalUI-Bold' could not be loaded, is 'EternalUiBold-jErYR.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.eternalUIRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'EternalUI-Regular' could not be loaded, is 'EternalUiRegular-1Gap2.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 43 images.
  struct image {
    /// Image `background1`.
    static let background1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "background1")
    /// Image `background2`.
    static let background2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "background2")
    /// Image `burgerMenuIcon`.
    static let burgerMenuIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "burgerMenuIcon")
    /// Image `demon1`.
    static let demon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "demon1")
    /// Image `demon2`.
    static let demon2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "demon2")
    /// Image `demon3`.
    static let demon3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "demon3")
    /// Image `demon4`.
    static let demon4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "demon4")
    /// Image `demon5`.
    static let demon5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "demon5")
    /// Image `demon6`.
    static let demon6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "demon6")
    /// Image `demon7`.
    static let demon7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "demon7")
    /// Image `difficultyMenuBackground`.
    static let difficultyMenuBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "difficultyMenuBackground")
    /// Image `doomguy10`.
    static let doomguy10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "doomguy10")
    /// Image `doomguy11`.
    static let doomguy11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "doomguy11")
    /// Image `doomguy12`.
    static let doomguy12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "doomguy12")
    /// Image `doomguy13`.
    static let doomguy13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "doomguy13")
    /// Image `doomguy1`.
    static let doomguy1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "doomguy1")
    /// Image `doomguy2`.
    static let doomguy2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "doomguy2")
    /// Image `doomguy3`.
    static let doomguy3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "doomguy3")
    /// Image `doomguy4`.
    static let doomguy4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "doomguy4")
    /// Image `doomguy5`.
    static let doomguy5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "doomguy5")
    /// Image `doomguy6`.
    static let doomguy6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "doomguy6")
    /// Image `doomguy7`.
    static let doomguy7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "doomguy7")
    /// Image `doomguy8`.
    static let doomguy8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "doomguy8")
    /// Image `doomguy9`.
    static let doomguy9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "doomguy9")
    /// Image `ender_world`.
    static let ender_world = Rswift.ImageResource(bundle: R.hostingBundle, name: "ender_world")
    /// Image `gameOverMenuBackground`.
    static let gameOverMenuBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "gameOverMenuBackground")
    /// Image `gameover`.
    static let gameover = Rswift.ImageResource(bundle: R.hostingBundle, name: "gameover")
    /// Image `grafonskyLogo`.
    static let grafonskyLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "grafonskyLogo")
    /// Image `leaderboardBackground`.
    static let leaderboardBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "leaderboardBackground")
    /// Image `leaderboardIcon`.
    static let leaderboardIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "leaderboardIcon")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `mainMenuBackground`.
    static let mainMenuBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "mainMenuBackground")
    /// Image `peakpx`.
    static let peakpx = Rswift.ImageResource(bundle: R.hostingBundle, name: "peakpx")
    /// Image `profilePic1`.
    static let profilePic1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "profilePic1")
    /// Image `profilePic2`.
    static let profilePic2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "profilePic2")
    /// Image `profilePic3`.
    static let profilePic3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "profilePic3")
    /// Image `profilePic4`.
    static let profilePic4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "profilePic4")
    /// Image `profilePic5`.
    static let profilePic5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "profilePic5")
    /// Image `profilePic6`.
    static let profilePic6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "profilePic6")
    /// Image `sad caco`.
    static let sadCaco = Rswift.ImageResource(bundle: R.hostingBundle, name: "sad caco")
    /// Image `score result`.
    static let scoreResult = Rswift.ImageResource(bundle: R.hostingBundle, name: "score result")
    /// Image `signUpIcon`.
    static let signUpIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "signUpIcon")
    /// Image `xgp`.
    static let xgp = Rswift.ImageResource(bundle: R.hostingBundle, name: "xgp")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background1", bundle: ..., traitCollection: ...)`
    static func background1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background2", bundle: ..., traitCollection: ...)`
    static func background2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "burgerMenuIcon", bundle: ..., traitCollection: ...)`
    static func burgerMenuIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.burgerMenuIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "demon1", bundle: ..., traitCollection: ...)`
    static func demon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.demon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "demon2", bundle: ..., traitCollection: ...)`
    static func demon2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.demon2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "demon3", bundle: ..., traitCollection: ...)`
    static func demon3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.demon3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "demon4", bundle: ..., traitCollection: ...)`
    static func demon4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.demon4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "demon5", bundle: ..., traitCollection: ...)`
    static func demon5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.demon5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "demon6", bundle: ..., traitCollection: ...)`
    static func demon6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.demon6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "demon7", bundle: ..., traitCollection: ...)`
    static func demon7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.demon7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "difficultyMenuBackground", bundle: ..., traitCollection: ...)`
    static func difficultyMenuBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.difficultyMenuBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doomguy1", bundle: ..., traitCollection: ...)`
    static func doomguy1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doomguy1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doomguy10", bundle: ..., traitCollection: ...)`
    static func doomguy10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doomguy10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doomguy11", bundle: ..., traitCollection: ...)`
    static func doomguy11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doomguy11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doomguy12", bundle: ..., traitCollection: ...)`
    static func doomguy12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doomguy12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doomguy13", bundle: ..., traitCollection: ...)`
    static func doomguy13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doomguy13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doomguy2", bundle: ..., traitCollection: ...)`
    static func doomguy2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doomguy2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doomguy3", bundle: ..., traitCollection: ...)`
    static func doomguy3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doomguy3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doomguy4", bundle: ..., traitCollection: ...)`
    static func doomguy4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doomguy4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doomguy5", bundle: ..., traitCollection: ...)`
    static func doomguy5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doomguy5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doomguy6", bundle: ..., traitCollection: ...)`
    static func doomguy6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doomguy6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doomguy7", bundle: ..., traitCollection: ...)`
    static func doomguy7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doomguy7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doomguy8", bundle: ..., traitCollection: ...)`
    static func doomguy8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doomguy8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "doomguy9", bundle: ..., traitCollection: ...)`
    static func doomguy9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doomguy9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ender_world", bundle: ..., traitCollection: ...)`
    static func ender_world(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ender_world, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gameOverMenuBackground", bundle: ..., traitCollection: ...)`
    static func gameOverMenuBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameOverMenuBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gameover", bundle: ..., traitCollection: ...)`
    static func gameover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gameover, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "grafonskyLogo", bundle: ..., traitCollection: ...)`
    static func grafonskyLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.grafonskyLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "leaderboardBackground", bundle: ..., traitCollection: ...)`
    static func leaderboardBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leaderboardBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "leaderboardIcon", bundle: ..., traitCollection: ...)`
    static func leaderboardIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leaderboardIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mainMenuBackground", bundle: ..., traitCollection: ...)`
    static func mainMenuBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainMenuBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "peakpx", bundle: ..., traitCollection: ...)`
    static func peakpx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.peakpx, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profilePic1", bundle: ..., traitCollection: ...)`
    static func profilePic1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profilePic1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profilePic2", bundle: ..., traitCollection: ...)`
    static func profilePic2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profilePic2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profilePic3", bundle: ..., traitCollection: ...)`
    static func profilePic3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profilePic3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profilePic4", bundle: ..., traitCollection: ...)`
    static func profilePic4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profilePic4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profilePic5", bundle: ..., traitCollection: ...)`
    static func profilePic5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profilePic5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profilePic6", bundle: ..., traitCollection: ...)`
    static func profilePic6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profilePic6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sad caco", bundle: ..., traitCollection: ...)`
    static func sadCaco(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sadCaco, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "score result", bundle: ..., traitCollection: ...)`
    static func scoreResult(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scoreResult, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "signUpIcon", bundle: ..., traitCollection: ...)`
    static func signUpIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signUpIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xgp", bundle: ..., traitCollection: ...)`
    static func xgp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xgp, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `reusableCell`.
    static let reusableCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "reusableCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 19 localization keys.
    struct localizable {
      /// en translation: %@
      ///
      /// Locales: en, ru
      static let gameOverScore = Rswift.StringResource(key: "gameOver.score", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Create profile?
      ///
      /// Locales: en, ru
      static let signUpConfirmationCreateProfile = Rswift.StringResource(key: "signUpConfirmation.createProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Easy
      ///
      /// Locales: en, ru
      static let difficultyEasy = Rswift.StringResource(key: "difficulty.easy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Hardcore
      ///
      /// Locales: en, ru
      static let difficultyHardcore = Rswift.StringResource(key: "difficulty.hardcore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Leaderboard
      ///
      /// Locales: en, ru
      static let mainMenuLeaderboard = Rswift.StringResource(key: "mainMenu.leaderboard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Log in to your account to save the race result
      ///
      /// Locales: en, ru
      static let mainMenuWarningLogIn = Rswift.StringResource(key: "mainMenuWarning.logIn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: NAME
      ///
      /// Locales: en, ru
      static let signUpName = Rswift.StringResource(key: "signUp.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, ru
      static let signUpConfirmationNo = Rswift.StringResource(key: "signUpConfirmation.no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Normal
      ///
      /// Locales: en, ru
      static let difficultyNormal = Rswift.StringResource(key: "difficulty.normal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en, ru
      static let mainMenuWarningOk = Rswift.StringResource(key: "mainMenuWarning.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: PROFILE PIC
      ///
      /// Locales: en, ru
      static let signUpProfilePic = Rswift.StringResource(key: "signUp.profilePic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Return
      ///
      /// Locales: en, ru
      static let gameOverReturn = Rswift.StringResource(key: "gameOver.return", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Score: 
      ///
      /// Locales: en, ru
      static let gameplayScore = Rswift.StringResource(key: "gameplay.score", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Sign Up
      ///
      /// Locales: en, ru
      static let mainMenuSignUp = Rswift.StringResource(key: "mainMenu.signUp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Sign Up
      ///
      /// Locales: en, ru
      static let signUpConfirmationSignUp = Rswift.StringResource(key: "signUpConfirmation.signUp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Sign Up
      ///
      /// Locales: en, ru
      static let signUpSignUp = Rswift.StringResource(key: "signUp.signUp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, ru
      static let mainMenuStart = Rswift.StringResource(key: "mainMenu.start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Warning
      ///
      /// Locales: en, ru
      static let mainMenuWarningWarning = Rswift.StringResource(key: "mainMenuWarning.warning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, ru
      static let signUpConfirmationYes = Rswift.StringResource(key: "signUpConfirmation.yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)

      /// en translation: %@
      ///
      /// Locales: en, ru
      static func gameOverScore(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("gameOver.score", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gameOver.score"
        }

        let format = NSLocalizedString("gameOver.score", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Create profile?
      ///
      /// Locales: en, ru
      static func signUpConfirmationCreateProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUpConfirmation.createProfile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signUpConfirmation.createProfile"
        }

        return NSLocalizedString("signUpConfirmation.createProfile", bundle: bundle, comment: "")
      }

      /// en translation: Easy
      ///
      /// Locales: en, ru
      static func difficultyEasy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("difficulty.easy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "difficulty.easy"
        }

        return NSLocalizedString("difficulty.easy", bundle: bundle, comment: "")
      }

      /// en translation: Hardcore
      ///
      /// Locales: en, ru
      static func difficultyHardcore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("difficulty.hardcore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "difficulty.hardcore"
        }

        return NSLocalizedString("difficulty.hardcore", bundle: bundle, comment: "")
      }

      /// en translation: Leaderboard
      ///
      /// Locales: en, ru
      static func mainMenuLeaderboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mainMenu.leaderboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mainMenu.leaderboard"
        }

        return NSLocalizedString("mainMenu.leaderboard", bundle: bundle, comment: "")
      }

      /// en translation: Log in to your account to save the race result
      ///
      /// Locales: en, ru
      static func mainMenuWarningLogIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mainMenuWarning.logIn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mainMenuWarning.logIn"
        }

        return NSLocalizedString("mainMenuWarning.logIn", bundle: bundle, comment: "")
      }

      /// en translation: NAME
      ///
      /// Locales: en, ru
      static func signUpName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signUp.name"
        }

        return NSLocalizedString("signUp.name", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, ru
      static func signUpConfirmationNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUpConfirmation.no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signUpConfirmation.no"
        }

        return NSLocalizedString("signUpConfirmation.no", bundle: bundle, comment: "")
      }

      /// en translation: Normal
      ///
      /// Locales: en, ru
      static func difficultyNormal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("difficulty.normal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "difficulty.normal"
        }

        return NSLocalizedString("difficulty.normal", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en, ru
      static func mainMenuWarningOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mainMenuWarning.ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mainMenuWarning.ok"
        }

        return NSLocalizedString("mainMenuWarning.ok", bundle: bundle, comment: "")
      }

      /// en translation: PROFILE PIC
      ///
      /// Locales: en, ru
      static func signUpProfilePic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.profilePic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signUp.profilePic"
        }

        return NSLocalizedString("signUp.profilePic", bundle: bundle, comment: "")
      }

      /// en translation: Return
      ///
      /// Locales: en, ru
      static func gameOverReturn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gameOver.return", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gameOver.return"
        }

        return NSLocalizedString("gameOver.return", bundle: bundle, comment: "")
      }

      /// en translation: Score: 
      ///
      /// Locales: en, ru
      static func gameplayScore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gameplay.score", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gameplay.score"
        }

        return NSLocalizedString("gameplay.score", bundle: bundle, comment: "")
      }

      /// en translation: Sign Up
      ///
      /// Locales: en, ru
      static func mainMenuSignUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mainMenu.signUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mainMenu.signUp"
        }

        return NSLocalizedString("mainMenu.signUp", bundle: bundle, comment: "")
      }

      /// en translation: Sign Up
      ///
      /// Locales: en, ru
      static func signUpConfirmationSignUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUpConfirmation.signUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signUpConfirmation.signUp"
        }

        return NSLocalizedString("signUpConfirmation.signUp", bundle: bundle, comment: "")
      }

      /// en translation: Sign Up
      ///
      /// Locales: en, ru
      static func signUpSignUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.signUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signUp.signUp"
        }

        return NSLocalizedString("signUp.signUp", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, ru
      static func mainMenuStart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mainMenu.start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mainMenu.start"
        }

        return NSLocalizedString("mainMenu.start", bundle: bundle, comment: "")
      }

      /// en translation: Warning
      ///
      /// Locales: en, ru
      static func mainMenuWarningWarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mainMenuWarning.warning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mainMenuWarning.warning"
        }

        return NSLocalizedString("mainMenuWarning.warning", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, ru
      static func signUpConfirmationYes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUpConfirmation.yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signUpConfirmation.yes"
        }

        return NSLocalizedString("signUpConfirmation.yes", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 32 localization keys.
    struct main {
      /// ru translation: 1000
      ///
      /// Locales: ru
      static let ddAC2OoZText = Rswift.StringResource(key: "ddA-C2-ooZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Button
      ///
      /// Locales: ru
      static let anqowmvNormalTitle = Rswift.StringResource(key: "1AN-QO-WMV.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Button
      ///
      /// Locales: ru
      static let fldNIGn4NormalTitle = Rswift.StringResource(key: "Fld-NI-Gn4.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Button
      ///
      /// Locales: ru
      static let gaTToNdjNormalTitle = Rswift.StringResource(key: "GaT-To-ndj.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Button
      ///
      /// Locales: ru
      static let i5PG6UhfNormalTitle = Rswift.StringResource(key: "I5P-g6-uhf.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Button
      ///
      /// Locales: ru
      static let lqzDD3DtNormalTitle = Rswift.StringResource(key: "Lqz-DD-3Dt.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Button
      ///
      /// Locales: ru
      static let n2nRy7cSNormalTitle = Rswift.StringResource(key: "N2n-ry-7cS.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Button
      ///
      /// Locales: ru
      static let nDVn0OkNormalTitle = Rswift.StringResource(key: "4nD-Vn-0Ok.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Button
      ///
      /// Locales: ru
      static let pBgZZRY1NormalTitle = Rswift.StringResource(key: "PBg-zZ-RY1.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Button
      ///
      /// Locales: ru
      static let qxAgOKaNormalTitle = Rswift.StringResource(key: "0qx-ag-OKa.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Button
      ///
      /// Locales: ru
      static let ujIDXPzUNormalTitle = Rswift.StringResource(key: "UjI-DX-pzU.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Button
      ///
      /// Locales: ru
      static let wRg2cGxlNormalTitle = Rswift.StringResource(key: "WRg-2c-gxl.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Button
      ///
      /// Locales: ru
      static let wuqXaC5KNormalTitle = Rswift.StringResource(key: "WUQ-xa-C5K.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Button
      ///
      /// Locales: ru
      static let zo6Hq0XWNormalTitle = Rswift.StringResource(key: "ZO6-hq-0XW.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Detail
      ///
      /// Locales: ru
      static let qbl8JNJTText = Rswift.StringResource(key: "Qbl-8J-nJT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Developed by https://github.com/Grafonsky
      ///
      /// Locales: ru
      static let nsLpLc6Text = Rswift.StringResource(key: "2Ns-lp-lc6.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Easy
      ///
      /// Locales: ru
      static let edqXiVgpNormalTitle = Rswift.StringResource(key: "edq-xi-vgp.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Hardcore
      ///
      /// Locales: ru
      static let s42N1BehNormalTitle = Rswift.StringResource(key: "S42-n1-beh.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Leaderboard
      ///
      /// Locales: ru
      static let lJWIYP2NormalTitle = Rswift.StringResource(key: "3lJ-wI-yP2.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: NAME
      ///
      /// Locales: ru
      static let tgnxkAeYText = Rswift.StringResource(key: "TGN-xK-aeY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: NICKNAME
      ///
      /// Locales: ru
      static let q9mP7hText = Rswift.StringResource(key: "69q-9m-p7h.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Normal
      ///
      /// Locales: ru
      static let yapO3Xd4NormalTitle = Rswift.StringResource(key: "yap-o3-Xd4.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: PROFILE PIC
      ///
      /// Locales: ru
      static let fcDF4UAKText = Rswift.StringResource(key: "FcD-F4-uAK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Player#1
      ///
      /// Locales: ru
      static let n2nRy7cSConfigurationTitle = Rswift.StringResource(key: "N2n-ry-7cS.configuration.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Player#2
      ///
      /// Locales: ru
      static let wRg2cGxlConfigurationTitle = Rswift.StringResource(key: "WRg-2c-gxl.configuration.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Player#3
      ///
      /// Locales: ru
      static let zo6Hq0XWConfigurationTitle = Rswift.StringResource(key: "ZO6-hq-0XW.configuration.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Return
      ///
      /// Locales: ru
      static let c3hVy9PdNormalTitle = Rswift.StringResource(key: "c3h-vy-9Pd.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Score: 0
      ///
      /// Locales: ru
      static let zZHVTQQText = Rswift.StringResource(key: "3zZ-HV-tQQ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Sign Up
      ///
      /// Locales: ru
      static let ujIDXPzUConfigurationTitle = Rswift.StringResource(key: "UjI-DX-pzU.configuration.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Sign Up
      ///
      /// Locales: ru
      static let wuqXaC5KConfigurationTitle = Rswift.StringResource(key: "WUQ-xa-C5K.configuration.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Start
      ///
      /// Locales: ru
      static let i0tKlAFnNormalTitle = Rswift.StringResource(key: "i0t-kl-aFn.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Title
      ///
      /// Locales: ru
      static let pfCNdXxIText = Rswift.StringResource(key: "PfC-Nd-xxI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)

      /// ru translation: 1000
      ///
      /// Locales: ru
      static func ddAC2OoZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ddA-C2-ooZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ddA-C2-ooZ.text"
        }

        return NSLocalizedString("ddA-C2-ooZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Button
      ///
      /// Locales: ru
      static func anqowmvNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1AN-QO-WMV.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1AN-QO-WMV.normalTitle"
        }

        return NSLocalizedString("1AN-QO-WMV.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Button
      ///
      /// Locales: ru
      static func fldNIGn4NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fld-NI-Gn4.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Fld-NI-Gn4.normalTitle"
        }

        return NSLocalizedString("Fld-NI-Gn4.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Button
      ///
      /// Locales: ru
      static func gaTToNdjNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GaT-To-ndj.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GaT-To-ndj.normalTitle"
        }

        return NSLocalizedString("GaT-To-ndj.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Button
      ///
      /// Locales: ru
      static func i5PG6UhfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I5P-g6-uhf.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "I5P-g6-uhf.normalTitle"
        }

        return NSLocalizedString("I5P-g6-uhf.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Button
      ///
      /// Locales: ru
      static func lqzDD3DtNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lqz-DD-3Dt.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Lqz-DD-3Dt.normalTitle"
        }

        return NSLocalizedString("Lqz-DD-3Dt.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Button
      ///
      /// Locales: ru
      static func n2nRy7cSNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N2n-ry-7cS.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "N2n-ry-7cS.normalTitle"
        }

        return NSLocalizedString("N2n-ry-7cS.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Button
      ///
      /// Locales: ru
      static func nDVn0OkNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4nD-Vn-0Ok.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4nD-Vn-0Ok.normalTitle"
        }

        return NSLocalizedString("4nD-Vn-0Ok.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Button
      ///
      /// Locales: ru
      static func pBgZZRY1NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PBg-zZ-RY1.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PBg-zZ-RY1.normalTitle"
        }

        return NSLocalizedString("PBg-zZ-RY1.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Button
      ///
      /// Locales: ru
      static func qxAgOKaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0qx-ag-OKa.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0qx-ag-OKa.normalTitle"
        }

        return NSLocalizedString("0qx-ag-OKa.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Button
      ///
      /// Locales: ru
      static func ujIDXPzUNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UjI-DX-pzU.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UjI-DX-pzU.normalTitle"
        }

        return NSLocalizedString("UjI-DX-pzU.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Button
      ///
      /// Locales: ru
      static func wRg2cGxlNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WRg-2c-gxl.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WRg-2c-gxl.normalTitle"
        }

        return NSLocalizedString("WRg-2c-gxl.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Button
      ///
      /// Locales: ru
      static func wuqXaC5KNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WUQ-xa-C5K.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WUQ-xa-C5K.normalTitle"
        }

        return NSLocalizedString("WUQ-xa-C5K.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Button
      ///
      /// Locales: ru
      static func zo6Hq0XWNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZO6-hq-0XW.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZO6-hq-0XW.normalTitle"
        }

        return NSLocalizedString("ZO6-hq-0XW.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Detail
      ///
      /// Locales: ru
      static func qbl8JNJTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Qbl-8J-nJT.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Qbl-8J-nJT.text"
        }

        return NSLocalizedString("Qbl-8J-nJT.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Developed by https://github.com/Grafonsky
      ///
      /// Locales: ru
      static func nsLpLc6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2Ns-lp-lc6.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2Ns-lp-lc6.text"
        }

        return NSLocalizedString("2Ns-lp-lc6.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Easy
      ///
      /// Locales: ru
      static func edqXiVgpNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edq-xi-vgp.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "edq-xi-vgp.normalTitle"
        }

        return NSLocalizedString("edq-xi-vgp.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Hardcore
      ///
      /// Locales: ru
      static func s42N1BehNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("S42-n1-beh.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "S42-n1-beh.normalTitle"
        }

        return NSLocalizedString("S42-n1-beh.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Leaderboard
      ///
      /// Locales: ru
      static func lJWIYP2NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3lJ-wI-yP2.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3lJ-wI-yP2.normalTitle"
        }

        return NSLocalizedString("3lJ-wI-yP2.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: NAME
      ///
      /// Locales: ru
      static func tgnxkAeYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TGN-xK-aeY.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "TGN-xK-aeY.text"
        }

        return NSLocalizedString("TGN-xK-aeY.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: NICKNAME
      ///
      /// Locales: ru
      static func q9mP7hText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("69q-9m-p7h.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "69q-9m-p7h.text"
        }

        return NSLocalizedString("69q-9m-p7h.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Normal
      ///
      /// Locales: ru
      static func yapO3Xd4NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yap-o3-Xd4.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yap-o3-Xd4.normalTitle"
        }

        return NSLocalizedString("yap-o3-Xd4.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: PROFILE PIC
      ///
      /// Locales: ru
      static func fcDF4UAKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FcD-F4-uAK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "FcD-F4-uAK.text"
        }

        return NSLocalizedString("FcD-F4-uAK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Player#1
      ///
      /// Locales: ru
      static func n2nRy7cSConfigurationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N2n-ry-7cS.configuration.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "N2n-ry-7cS.configuration.title"
        }

        return NSLocalizedString("N2n-ry-7cS.configuration.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Player#2
      ///
      /// Locales: ru
      static func wRg2cGxlConfigurationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WRg-2c-gxl.configuration.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WRg-2c-gxl.configuration.title"
        }

        return NSLocalizedString("WRg-2c-gxl.configuration.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Player#3
      ///
      /// Locales: ru
      static func zo6Hq0XWConfigurationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZO6-hq-0XW.configuration.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZO6-hq-0XW.configuration.title"
        }

        return NSLocalizedString("ZO6-hq-0XW.configuration.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Return
      ///
      /// Locales: ru
      static func c3hVy9PdNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c3h-vy-9Pd.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "c3h-vy-9Pd.normalTitle"
        }

        return NSLocalizedString("c3h-vy-9Pd.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Score: 0
      ///
      /// Locales: ru
      static func zZHVTQQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3zZ-HV-tQQ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3zZ-HV-tQQ.text"
        }

        return NSLocalizedString("3zZ-HV-tQQ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Sign Up
      ///
      /// Locales: ru
      static func ujIDXPzUConfigurationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UjI-DX-pzU.configuration.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UjI-DX-pzU.configuration.title"
        }

        return NSLocalizedString("UjI-DX-pzU.configuration.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Sign Up
      ///
      /// Locales: ru
      static func wuqXaC5KConfigurationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WUQ-xa-C5K.configuration.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WUQ-xa-C5K.configuration.title"
        }

        return NSLocalizedString("WUQ-xa-C5K.configuration.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Start
      ///
      /// Locales: ru
      static func i0tKlAFnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("i0t-kl-aFn.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "i0t-kl-aFn.normalTitle"
        }

        return NSLocalizedString("i0t-kl-aFn.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// ru translation: Title
      ///
      /// Locales: ru
      static func pfCNdXxIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PfC-Nd-xxI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PfC-Nd-xxI.text"
        }

        return NSLocalizedString("PfC-Nd-xxI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let difficultyID = StoryboardViewControllerResource<DifficultyMenu>(identifier: "DifficultyID")
      let gameOverID = StoryboardViewControllerResource<GameOverScreen>(identifier: "GameOverID")
      let leaderboardID = StoryboardViewControllerResource<LeaderboardController>(identifier: "LeaderboardID")
      let mainMenuID = StoryboardViewControllerResource<MainMenu>(identifier: "MainMenuID")
      let name = "Main"
      let signUpID = StoryboardViewControllerResource<SignUpController>(identifier: "SignUpID")
      let trackID = StoryboardViewControllerResource<Track>(identifier: "TrackID")

      func difficultyID(_: Void = ()) -> DifficultyMenu? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: difficultyID)
      }

      func gameOverID(_: Void = ()) -> GameOverScreen? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gameOverID)
      }

      func leaderboardID(_: Void = ()) -> LeaderboardController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: leaderboardID)
      }

      func mainMenuID(_: Void = ()) -> MainMenu? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainMenuID)
      }

      func signUpID(_: Void = ()) -> SignUpController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpID)
      }

      func trackID(_: Void = ()) -> Track? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: trackID)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "3hearts", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '3hearts' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "background2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "burgerMenuIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'burgerMenuIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "difficultyMenuBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'difficultyMenuBackground' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gameOverMenuBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gameOverMenuBackground' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gameover", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gameover' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "grafonskyLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'grafonskyLogo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "leaderboardBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'leaderboardBackground' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "leaderboardIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'leaderboardIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mainMenuBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mainMenuBackground' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profilePic1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profilePic1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profilePic2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profilePic2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profilePic3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profilePic3' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profilePic4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profilePic4' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profilePic5", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profilePic5' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profilePic6", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profilePic6' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sad caco", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sad caco' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "signUpIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'signUpIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().difficultyID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'difficultyID' could not be loaded from storyboard 'Main' as 'DifficultyMenu'.") }
        if _R.storyboard.main().gameOverID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gameOverID' could not be loaded from storyboard 'Main' as 'GameOverScreen'.") }
        if _R.storyboard.main().leaderboardID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'leaderboardID' could not be loaded from storyboard 'Main' as 'LeaderboardController'.") }
        if _R.storyboard.main().mainMenuID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainMenuID' could not be loaded from storyboard 'Main' as 'MainMenu'.") }
        if _R.storyboard.main().signUpID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpID' could not be loaded from storyboard 'Main' as 'SignUpController'.") }
        if _R.storyboard.main().trackID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'trackID' could not be loaded from storyboard 'Main' as 'Track'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
